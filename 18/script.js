/*
const input = [
"#########",
"#b.A.@.a#",
"#########"
]*/
/*
const input = [
"########################",
"#f.D.E.e.C.b.A.@.a.B.c.#",
"######################.#",
"#d.....................#",
"########################",
]*/
/*
const input = [
"#################",
"#i.G..c...e..H.p#",
"########.########",
"#j.A..b...f..D.o#",
"########@########",
"#k.E..a...g..B.n#",
"########.########",
"#l.F..d...h..C.m#",
"#################"
]*/

const input = [
"#################################################################################",
"#.#..a....#...#..........y..#.#.........#.I...#...#.....#.............#.......#.#",
"#.#.###.###.#.#P#########.#.#S#.#######.#.###.#.#.###.#.###.#########.#.#####.#.#",
"#.#...#.#...#...#.......#.#.#.#...#z....#...#.#.#.#...#...#.#...#.....#.#.......#",
"#.###.#.#.#######.#######.#.#.###.#.#####.#.#.#.#.#.#####.#.#.#.#.#####.#######.#",
"#q..#.#...#.#.....#.....#.#.#.....#.....#.#.#.#.#.#.....#..c#.#.#.......#.....#.#",
"#.###.#####.#.#.#.#.###.#.#.###########.#.#.#.#.#.#####.#####.#.#########.###.#.#",
"#.#...#.....#.#.#.#...#...#......b......#.#.#...#...#...#...#.#.....#.....#.#.#.#",
"#.#.###.#####.#.#####.#####.#######.#####.#.#######.#.#.#.#.#.#####.#.#####.#.###",
"#.#...#.......#.....#.#.....#.....#.#l..#.#...#.D.....#.#.#...#...#...#.....#...#",
"#.###.###.#######.#.#.#######.###.###.#.#.###.###.#####.#.#######.#####.###.###.#",
"#...#...#...#...#.#.#.......#...#.....#.#...#...#.#...#n#.#.......#....r..#.#...#",
"#.#.###.###.#.#.###.#######.###.#######.#######.#.#.#.#.#.#.#####.#.#######.#.###",
"#.#...#...#.#.#...........#...#.#.#...#.#.......#.#.#.#.#...#...#.#.....#...#...#",
"###.#####.###.###########.#.###.#.#.#.#.#.###.#####.#.#.#####.###.#######.#.###A#",
"#...#.....#...#...........#.#...#.#v#...#.#...#.....#.#...#...............#.#...#",
"#.###.#####.###.#####.#####.#.###.#.#####.#####.#####.#####.#################.###",
"#.....#.....#...#.G.#.#...#.......#.#...#...#.....#...#.....#.........#.....#.#.#",
"#.#####.#####.###.#.###.#.#######.#.###.#.#.#.#####.#.#.#####.#######.#.###.#.#.#",
"#.R...#.#.....#...#.#x..#...F.#.#.#...#.#.#...#...#.#.#.#...#.#.#...#.#...#...#.#",
"#####.#.#######.###.#.#######.#.#.###.#.#.#####.#.#.#.#.#.#.#.#.#.#.#.###.#####.#",
"#.#...#.........#...#.#.....#.#...#...#.#.#...#.#...#.#...#.#.#...#.#.....#...#.#",
"#.#.#########.###.#.###.###.#.#####.###.#.#.#.#.###.#######.#######.#######.#.#.#",
"#...#.......#.#...#.....#.#.#.......#...#.#.#.#...#.#.....#.......#.#.....T.#...#",
"#.#####.###.#.#.#########.#.#########.###.#.#.###.#.#.###.#######.#.#.#.#######.#",
"#...M.#.#...#.#.....#.....#...#.........#.#.#.....#.#.#.#.....#.#.#...#.#.....#.#",
"#####.#.###.#.#####.###.#.###.#####.###.#.#.#########.#.###.#.#.#.#.###.#.###.#.#",
"#...#.#...#.#.....#...#.#...#.....#...#.#.#.......#...#.#...#...#.#.#...#...#.#.#",
"#.###.###.#.#########.#.#########.#####.#.#######.#.###.#.#######.#.#.#####.#.#.#",
"#...#.....#...........#.....#...#.......#.....#.#...#...#...#.....#.#.......#.#.#",
"#K#.###################.###.#.#.#######.#####.#.#######.###.#.#####.#########.#.#",
"#.#...........#.....#...#.#.#.#.......#.#.#...#...#.......#...#.............#.#.#",
"#.#.###.#######.#.###.###.#.#.#####.###.#.#.###.###.#.###.#####.#############.###",
"#.#.#...#.......#.....#...#...#...#...#.#...#.......#...#.....#.....#.......#...#",
"#.#.#.###.#############.#.#####.#.###.#.#.#########.###.#######.#####.#####.###.#",
"#.#.#...#.....#...H.....#.......#...#...#.#.......#...#.....#...#.....#...#...#.#",
"#.#.###.#####.#######.#########.###.#####.#.#####.###.#####.#.###.#####.#.###.#.#",
"#.#.#...#.....#.....#.......#...#...#...#...#.....#.......#.....#.....#.#...#.#.#",
"#.#.#####.#####.###.#########.###.#####.#####.#######################.#.#.###.#.#",
"#.#..........u..#.............#o......................................#.#....k..#",
"#######################################.@.#######################################",
"#.#.......#.............#.......#...................#.....#....h......#.......#.#",
"#.#.#####.#.#######.#####.#####.#.#.###.#.###.#####.###O#.###.#######.#.#####.#.#",
"#.#.....#...#.....#.#.....#.....#.#.#.#.#...#.#.........#.....#...#...#...#.#...#",
"#.#####.#####.###.#.#.#####.#####.#.#.#.###.#.#################.#.#.###.#.#.###.#",
"#.E...#.#.#..w#...#.#.#.#.Z.#...#.#.#...#...#.#...#.......#.#.U.#...#...#.#...#.#",
"#.###.#.#.#.###.###.#.#.#.###.#.#.#.#####.###.#.#.#.#####.#.#.###########.#.#.#.#",
"#.#...#.#...#...#...#.#.#...#.#.#.#.....#...#...#...#...#.#.#.....#.....#.#.#.#.#",
"#.#.###.#.###.#.#.###.#.###.#.#.#####.#.###.#########.#.#.#.#####.#.###.#.#.#.#.#",
"#.#...#.#...#.#.#...#.#...#s..#.....#.#.#.#.#.........#.#.#.#...#...#.#...#.#.#.#",
"#####.#.###.#.#####.#.#.#.#########.#.#.#.#.#.#####.#####.#.#.#.#####.#####.#.#.#",
"#.....#.#...#.....#...#.#.......#...#.#.#.#.#.#.....#.....#...#.......#.....#...#",
"#.#####.#########.#####.#######.#.#####.#.#.###.###.#.#####.###.#######.#########",
"#.#.....#...#...#.....#.#...#...#.#.....#.#.#...#...#.#.#...#.#.....#...#...#..m#",
"#.#.#####.#.#.#.#.###.#.#.#.#####.#.###.#.#.#.###.###.#.#.###.#####.#.###.#.###.#",
"#.#.#.....#.#.#...#.#.#...#...#...#...#.#.#...#.....#.#...#.......#...#..e#...#.#",
"#.#.#####.#.#.#####.#.###.###.#.###.#.###.###.#######.#.#######.#.#####.#####.#.#",
"#.#...#...#...#.....#...#.#...#.L.#.#...#.#...#...#...#.....#...#...#...#...#...#",
"#.###.#.#######.###.###.###.#.###.#.###.#.#.###.#.#.#######.#.#####J#.###.#.###.#",
"#...#...#...#...#.#.......#.#.#...#...#.#.....#.#...#.#.......#.......#...#.#...#",
"#.#.#######.#.###.#######.#.###.###.###.#.#####.#####.#.###############.#.###.###",
"#.#.#.......#.#.....#...#...#...#...#...#...#...#.......#...#.#.....#.#.#.....#.#",
"#.###.#.#####.#.###.###.#####.###.###.#.#####.###.#########.#.#.###.#.#.#######.#",
"#...#.#.......#...#...#.#...#.#...#.#.#.#.....#.#...#.....#.#...#.#.#.#.....#...#",
"#.#.#.###########.#.#.#X#.#.#.###.#.#.###.#####.###.#.#.#.#.#####.#.#.#####.###Q#",
"#j#.#...#.........#.#.#...#.#.V.#...#...#.#.......#.#.#.#...#.....#.#.....#.#...#",
"###.###.#.#########.#######.#.#.#######.#.###.#.###.#.#.###.#.#.###.#.#.###.#.#.#",
"#...#...#...#.....#d....#...#.#.#.......#...#.#.#...#.#...#...#.#...#.#.....#.#.#",
"#.#.#.#####.###.#.###.#.#.#####.#.#####.###.###.#.#######.#####.#.###W#######.#.#",
"#.#.#.#.......#.#...#.#.#.#..f..#...#.#.#...#...#...#...#...#...#.#.#.....#...#.#",
"#.#.#.#######.#.#.#.#.###.###.###.#.#.#.#.###.#####.#.#.###.#.###.#.#####.#.###.#",
"#.#.#.....C.#.#.#.#.#...#.....#...#.#.#.#.#...........#...#.#.#...#.....#...#.#.#",
"#.#########.#.###.#.###.#######.###.#.#.#.#####.#########.#.###.###.#.#######.#.#",
"#...#.....#.#.....#...#.....#.....#.#...#.....#.#.......#...#...#...#.........#.#",
"#.#.#.###.#.###########.###.#######.###.#.###.###.#####.#####.###.#########.#.#.#",
"#.#.....#.#.......#...#...#t#.....#...#.#...#.....#...#.....#...#.Y.#.#.....#.#.#",
"#.#######.#######.#.#.###.#.#.###.###.#.###.#######.#######.###.###.#.#.#######.#",
"#..g#.#...#.......#.#.#...#...#...#...#.#.#.#.....#.......#...#.#.#.#.#....p..#.#",
"###.#.#N###.#######.#.#.#######.###.###.#.#.#.###.#######.###.#.#.#.#.#######.#.#",
"#.....#.............#...#........i..#...#.....#.............#...#.........B.#...#",
"#################################################################################",
]
const width = input[0].length;
const height = input.length;
const keys = [...input.join("")].reduce((agg, cur) => {
    if("abcdefghijklmnopqrstuvwxyz".indexOf(cur) !== -1)
        agg.push(cur)
    return agg
}, []).join("")
const field = input.join("")

const read = (field, x, y) => {
    return field[y * width + x] || '#'
}

const drawField = (field, state) => {
    let output = ""
    for(let y = 0; y < height; y++) {
        for(let x = 0; x < width; x++) {
            const tile = read(field, x, y)
            if(x == state.split(",")[0] && y == state.split(",")[1]) {
                output += '@'
            } else if(state.split(",")[2].indexOf(tile.toLowerCase()) !== -1 || tile === '@') {
                output += '.'
            } else {
                output += tile
            }
        }
        output += "\n"
    }
    console.log(output)
}
drawField(field, "0,0,,")

// Part 1
const findNeighbours = (state) => {
    const parts  = state.split(",")
    const x = +parts[0]
    const y = +parts[1]
    const keyState = parts[2]
    
    const isPassable = (tile) => {
        return "@.abcdefghijklmnopqrstuvwxyz".indexOf(tile) !== -1
            || keyState.indexOf(tile.toLowerCase()) !== -1;
    }
    
    const result = []
    
    // Up, Down, Left, Right
    for(let option of [[x, y - 1], [x, y + 1], [x - 1, y], [x + 1, y]]) {
        const nx = option[0]
        const ny = option[1]
        let tile = read(field, nx, ny)
        if(isPassable(tile)) {
            let newKeys = [...keyState]
            if("abcdefghijklmnopqrstuvwxyz".indexOf(tile) !== -1 && keyState.indexOf(tile) === -1) {
                newKeys.push(tile)
                newKeys = newKeys.sort()
            }
            result.push([nx, ny, newKeys.join("")].join(","))
        }
    }

    return result;
}

let state = ""
{
    const pos = field.indexOf('@')
    const x = pos % width
    const y = ~~(pos / width)
    state = [x, y, ""].join(",")
}

let visited = new Set([])
let open = new Set([state])
let running = true
let steps = 0
while(running) {
    let newOpen = new Set([])
    for(let state of open) {
        visited.add(state);
        if(state.split(",")[2].length === keys.length) {
            drawField(field, state)
            console.log("found solution in", steps, state)
            running = false
            break
        }
        
        // Check neighbours
        for(let neighbour of findNeighbours(state)) {
            if(visited.has(neighbour)) {
                continue;
            }
            newOpen.add(neighbour);
        }
    }
    
    console.log('Steps', steps, open.size, newOpen.size)
    open = newOpen
    steps++
}
//const state = 

