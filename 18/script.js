/*
const input = [
"#########",
"#b.A.@.a#",
"#########"
]*/
/*
const input = [
"########################",
"#f.D.E.e.C.b.A.@.a.B.c.#",
"######################.#",
"#d.....................#",
"########################",
]*/
/*
const input = [
"#################",
"#i.G..c...e..H.p#",
"########.########",
"#j.A..b...f..D.o#",
"########@########",
"#k.E..a...g..B.n#",
"########.########",
"#l.F..d...h..C.m#",
"#################"
]*/
/*
const input = [
"#############",
"#DcBa.#.GhKl#",
"#.###...#I###",
"#e#d#.@.#j#k#",
"###C#...###J#",
"#fEbA.#.FgHi#",
"#############"
]*/

const input = [
"#################################################################################",
"#.#..a....#...#..........y..#.#.........#.I...#...#.....#.............#.......#.#",
"#.#.###.###.#.#P#########.#.#S#.#######.#.###.#.#.###.#.###.#########.#.#####.#.#",
"#.#...#.#...#...#.......#.#.#.#...#z....#...#.#.#.#...#...#.#...#.....#.#.......#",
"#.###.#.#.#######.#######.#.#.###.#.#####.#.#.#.#.#.#####.#.#.#.#.#####.#######.#",
"#q..#.#...#.#.....#.....#.#.#.....#.....#.#.#.#.#.#.....#..c#.#.#.......#.....#.#",
"#.###.#####.#.#.#.#.###.#.#.###########.#.#.#.#.#.#####.#####.#.#########.###.#.#",
"#.#...#.....#.#.#.#...#...#......b......#.#.#...#...#...#...#.#.....#.....#.#.#.#",
"#.#.###.#####.#.#####.#####.#######.#####.#.#######.#.#.#.#.#.#####.#.#####.#.###",
"#.#...#.......#.....#.#.....#.....#.#l..#.#...#.D.....#.#.#...#...#...#.....#...#",
"#.###.###.#######.#.#.#######.###.###.#.#.###.###.#####.#.#######.#####.###.###.#",
"#...#...#...#...#.#.#.......#...#.....#.#...#...#.#...#n#.#.......#....r..#.#...#",
"#.#.###.###.#.#.###.#######.###.#######.#######.#.#.#.#.#.#.#####.#.#######.#.###",
"#.#...#...#.#.#...........#...#.#.#...#.#.......#.#.#.#.#...#...#.#.....#...#...#",
"###.#####.###.###########.#.###.#.#.#.#.#.###.#####.#.#.#####.###.#######.#.###A#",
"#...#.....#...#...........#.#...#.#v#...#.#...#.....#.#...#...............#.#...#",
"#.###.#####.###.#####.#####.#.###.#.#####.#####.#####.#####.#################.###",
"#.....#.....#...#.G.#.#...#.......#.#...#...#.....#...#.....#.........#.....#.#.#",
"#.#####.#####.###.#.###.#.#######.#.###.#.#.#.#####.#.#.#####.#######.#.###.#.#.#",
"#.R...#.#.....#...#.#x..#...F.#.#.#...#.#.#...#...#.#.#.#...#.#.#...#.#...#...#.#",
"#####.#.#######.###.#.#######.#.#.###.#.#.#####.#.#.#.#.#.#.#.#.#.#.#.###.#####.#",
"#.#...#.........#...#.#.....#.#...#...#.#.#...#.#...#.#...#.#.#...#.#.....#...#.#",
"#.#.#########.###.#.###.###.#.#####.###.#.#.#.#.###.#######.#######.#######.#.#.#",
"#...#.......#.#...#.....#.#.#.......#...#.#.#.#...#.#.....#.......#.#.....T.#...#",
"#.#####.###.#.#.#########.#.#########.###.#.#.###.#.#.###.#######.#.#.#.#######.#",
"#...M.#.#...#.#.....#.....#...#.........#.#.#.....#.#.#.#.....#.#.#...#.#.....#.#",
"#####.#.###.#.#####.###.#.###.#####.###.#.#.#########.#.###.#.#.#.#.###.#.###.#.#",
"#...#.#...#.#.....#...#.#...#.....#...#.#.#.......#...#.#...#...#.#.#...#...#.#.#",
"#.###.###.#.#########.#.#########.#####.#.#######.#.###.#.#######.#.#.#####.#.#.#",
"#...#.....#...........#.....#...#.......#.....#.#...#...#...#.....#.#.......#.#.#",
"#K#.###################.###.#.#.#######.#####.#.#######.###.#.#####.#########.#.#",
"#.#...........#.....#...#.#.#.#.......#.#.#...#...#.......#...#.............#.#.#",
"#.#.###.#######.#.###.###.#.#.#####.###.#.#.###.###.#.###.#####.#############.###",
"#.#.#...#.......#.....#...#...#...#...#.#...#.......#...#.....#.....#.......#...#",
"#.#.#.###.#############.#.#####.#.###.#.#.#########.###.#######.#####.#####.###.#",
"#.#.#...#.....#...H.....#.......#...#...#.#.......#...#.....#...#.....#...#...#.#",
"#.#.###.#####.#######.#########.###.#####.#.#####.###.#####.#.###.#####.#.###.#.#",
"#.#.#...#.....#.....#.......#...#...#...#...#.....#.......#.....#.....#.#...#.#.#",
"#.#.#####.#####.###.#########.###.#####.#####.#######################.#.#.###.#.#",
"#.#..........u..#.............#o......................................#.#....k..#",
"#######################################.@.#######################################",
"#.#.......#.............#.......#...................#.....#....h......#.......#.#",
"#.#.#####.#.#######.#####.#####.#.#.###.#.###.#####.###O#.###.#######.#.#####.#.#",
"#.#.....#...#.....#.#.....#.....#.#.#.#.#...#.#.........#.....#...#...#...#.#...#",
"#.#####.#####.###.#.#.#####.#####.#.#.#.###.#.#################.#.#.###.#.#.###.#",
"#.E...#.#.#..w#...#.#.#.#.Z.#...#.#.#...#...#.#...#.......#.#.U.#...#...#.#...#.#",
"#.###.#.#.#.###.###.#.#.#.###.#.#.#.#####.###.#.#.#.#####.#.#.###########.#.#.#.#",
"#.#...#.#...#...#...#.#.#...#.#.#.#.....#...#...#...#...#.#.#.....#.....#.#.#.#.#",
"#.#.###.#.###.#.#.###.#.###.#.#.#####.#.###.#########.#.#.#.#####.#.###.#.#.#.#.#",
"#.#...#.#...#.#.#...#.#...#s..#.....#.#.#.#.#.........#.#.#.#...#...#.#...#.#.#.#",
"#####.#.###.#.#####.#.#.#.#########.#.#.#.#.#.#####.#####.#.#.#.#####.#####.#.#.#",
"#.....#.#...#.....#...#.#.......#...#.#.#.#.#.#.....#.....#...#.......#.....#...#",
"#.#####.#########.#####.#######.#.#####.#.#.###.###.#.#####.###.#######.#########",
"#.#.....#...#...#.....#.#...#...#.#.....#.#.#...#...#.#.#...#.#.....#...#...#..m#",
"#.#.#####.#.#.#.#.###.#.#.#.#####.#.###.#.#.#.###.###.#.#.###.#####.#.###.#.###.#",
"#.#.#.....#.#.#...#.#.#...#...#...#...#.#.#...#.....#.#...#.......#...#..e#...#.#",
"#.#.#####.#.#.#####.#.###.###.#.###.#.###.###.#######.#.#######.#.#####.#####.#.#",
"#.#...#...#...#.....#...#.#...#.L.#.#...#.#...#...#...#.....#...#...#...#...#...#",
"#.###.#.#######.###.###.###.#.###.#.###.#.#.###.#.#.#######.#.#####J#.###.#.###.#",
"#...#...#...#...#.#.......#.#.#...#...#.#.....#.#...#.#.......#.......#...#.#...#",
"#.#.#######.#.###.#######.#.###.###.###.#.#####.#####.#.###############.#.###.###",
"#.#.#.......#.#.....#...#...#...#...#...#...#...#.......#...#.#.....#.#.#.....#.#",
"#.###.#.#####.#.###.###.#####.###.###.#.#####.###.#########.#.#.###.#.#.#######.#",
"#...#.#.......#...#...#.#...#.#...#.#.#.#.....#.#...#.....#.#...#.#.#.#.....#...#",
"#.#.#.###########.#.#.#X#.#.#.###.#.#.###.#####.###.#.#.#.#.#####.#.#.#####.###Q#",
"#j#.#...#.........#.#.#...#.#.V.#...#...#.#.......#.#.#.#...#.....#.#.....#.#...#",
"###.###.#.#########.#######.#.#.#######.#.###.#.###.#.#.###.#.#.###.#.#.###.#.#.#",
"#...#...#...#.....#d....#...#.#.#.......#...#.#.#...#.#...#...#.#...#.#.....#.#.#",
"#.#.#.#####.###.#.###.#.#.#####.#.#####.###.###.#.#######.#####.#.###W#######.#.#",
"#.#.#.#.......#.#...#.#.#.#..f..#...#.#.#...#...#...#...#...#...#.#.#.....#...#.#",
"#.#.#.#######.#.#.#.#.###.###.###.#.#.#.#.###.#####.#.#.###.#.###.#.#####.#.###.#",
"#.#.#.....C.#.#.#.#.#...#.....#...#.#.#.#.#...........#...#.#.#...#.....#...#.#.#",
"#.#########.#.###.#.###.#######.###.#.#.#.#####.#########.#.###.###.#.#######.#.#",
"#...#.....#.#.....#...#.....#.....#.#...#.....#.#.......#...#...#...#.........#.#",
"#.#.#.###.#.###########.###.#######.###.#.###.###.#####.#####.###.#########.#.#.#",
"#.#.....#.#.......#...#...#t#.....#...#.#...#.....#...#.....#...#.Y.#.#.....#.#.#",
"#.#######.#######.#.#.###.#.#.###.###.#.###.#######.#######.###.###.#.#.#######.#",
"#..g#.#...#.......#.#.#...#...#...#...#.#.#.#.....#.......#...#.#.#.#.#....p..#.#",
"###.#.#N###.#######.#.#.#######.###.###.#.#.#.###.#######.###.#.#.#.#.#######.#.#",
"#.....#.............#...#........i..#...#.....#.............#...#.........B.#...#",
"#################################################################################",
]
const width = input[0].length;
const height = input.length;
const keys = [...input.join("")].reduce((agg, cur) => {
    if("abcdefghijklmnopqrstuvwxyz".indexOf(cur) !== -1)
        agg.push(cur)
    return agg
}, []).join("")
const field = [...input.join("")]

const read = (field, x, y) => {
    return field[y * width + x] || '#'
}
const write = (field, x, y, value) => {
    return field[y * width + x] = value
}

const drawField = (field, state) => {
    let output = ""
    for(let y = 0; y < height; y++) {
        for(let x = 0; x < width; x++) {
            const tile = read(field, x, y)
            if(state.split(",").indexOf(`${x}|${y}`) !== -1) {
                output += '@'
            } else if(state.split(",")[0].indexOf(tile.toLowerCase()) !== -1 || tile === '@') {
                output += '.'
            } else {
                output += tile
            }
        }
        output += "\n"
    }
    console.log(output)
}

// Update field for part 2
const positions = []
{
    const pos = field.indexOf('@')
    const x = pos % width
    const y = ~~(pos / width)
    write(field, x, y, '#')
    write(field, x - 1, y, '#')
    write(field, x + 1, y, '#')
    write(field, x, y - 1, '#')
    write(field, x, y + 1, '#')
    //positions.push([x, y])
    positions.push([x - 1, y - 1])
    positions.push([x + 1, y - 1])
    positions.push([x - 1, y + 1])
    positions.push([x + 1, y + 1])
}

drawField(field, "0,0,,")

// Part 1
const findNeighbours = (state) => {
    const parts  = state.split(",")
    const keyState = parts[0]
    
    const isPassable = (tile) => {
        return "@.abcdefghijklmnopqrstuvwxyz".indexOf(tile.toLowerCase()) !== -1
            || keyState.indexOf(tile.toLowerCase()) !== -1;
    }
    
    const result = []
    
    // Robots
    for(let i = 1; i < parts.length; i++) {
        const position = parts[i].split("|")
        const x = +position[0]
        const y = +position[1]

        // Up, Down, Left, Right
        for(let option of [[x, y - 1], [x, y + 1], [x - 1, y], [x + 1, y]]) {
            const nx = option[0]
            const ny = option[1]
            let tile = read(field, nx, ny)
            if(isPassable(tile)) {
                let newKeys = [...keyState]
                if("abcdefghijklmnopqrstuvwxyz".indexOf(tile) !== -1 && keyState.indexOf(tile) === -1) {
                    newKeys.push(tile)
                    newKeys = newKeys.sort()
                }
                const newState = [...parts]
                newState[0] = newKeys.join("")
                newState[i] = nx + "|" + ny
                result.push(newState.join(","))
            }
        }
    }

    return result;
}

const search = (state, keys) => {
    let visited = new Set([])
    let open = new Set([state])
    let running = true
    let steps = 0
    while(running && open.size) {
        let newOpen = new Set([])
        for(let state of open) {
            visited.add(state);
            if(state.split(",")[0].length === keys.length) {
                drawField(field, state)
                console.log("found solution in", steps, state)
                running = false
                return steps
                break
            }
            
            // Check neighbours
            for(let neighbour of findNeighbours(state)) {
                if(visited.has(neighbour)) {
                    continue;
                }
                newOpen.add(neighbour);
            }
        }
        
        //console.log('Steps', steps, open.size, newOpen.size)
        open = newOpen
        steps++
    }
    return -1
}

let sum = 0
// Top-left
{
    const keysPresent = new Set()
    const doorsPresent = new Set()
    for(let x = 0; x < width / 2; x++) {
        for(let y = 0; y < height / 2; y++) {
            const tile = read(field, x, y)
            if("abcdefghijklmnopqrstuvwxyz".indexOf(tile) !== -1) {
                keysPresent.add(tile)
            } else if("abcdefghijklmnopqrstuvwxyz".indexOf(tile.toLowerCase()) !== -1) {
                doorsPresent.add(tile)
            }
        }
    }
    console.log(keysPresent, doorsPresent)
    
    // Check the keys outside their quadrant
    const pos = positions[0]
    let state = ""
    {
        const parts = [""]
        parts.push(pos[0] + "|" + pos[1])
        state = parts.join(",")
    }
    const steps = search(state, [...keysPresent])
    console.log('Steps', steps)
    sum += steps
}
// Top-Right
{
    const keysPresent = new Set()
    const doorsPresent = new Set()
    for(let x = ~~(width / 2); x < width; x++) {
        for(let y = 0; y < height / 2; y++) {
            const tile = read(field, x, y)
            if("abcdefghijklmnopqrstuvwxyz".indexOf(tile) !== -1) {
                keysPresent.add(tile)
            } else if("abcdefghijklmnopqrstuvwxyz".indexOf(tile.toLowerCase()) !== -1) {
                doorsPresent.add(tile)
            }
        }
    }
    console.log(keysPresent, doorsPresent)
    
    // Check the keys outside their quadrant
    const pos = positions[1]
    let state = ""
    {
        const parts = [""]
        parts.push(pos[0] + "|" + pos[1])
        state = parts.join(",")
    }
    const steps = search(state, [...keysPresent])
    console.log('Steps', steps)
    sum += steps
}
// Bottom-left
{
    const keysPresent = new Set()
    const doorsPresent = new Set()
    for(let x = 0; x < width / 2; x++) {
        for(let y = ~~(height / 2); y < height; y++) {
            const tile = read(field, x, y)
            if("abcdefghijklmnopqrstuvwxyz".indexOf(tile) !== -1) {
                keysPresent.add(tile)
            } else if("abcdefghijklmnopqrstuvwxyz".indexOf(tile.toLowerCase()) !== -1) {
                doorsPresent.add(tile)
            }
        }
    }
    console.log(keysPresent, doorsPresent)
    
    // Check the keys outside their quadrant
    const pos = positions[2]
    let state = ""
    {
        const parts = [""]
        parts.push(pos[0] + "|" + pos[1])
        state = parts.join(",")
    }
    const steps = search(state, [...keysPresent])
    console.log('Steps', steps)
    sum += steps
}
// Bottom-right
{
    const keysPresent = new Set()
    const doorsPresent = new Set()
    for(let x = ~~(width / 2); x < width; x++) {
        for(let y = ~~(height / 2); y < height; y++) {
            const tile = read(field, x, y)
            if("abcdefghijklmnopqrstuvwxyz".indexOf(tile) !== -1) {
                keysPresent.add(tile)
            } else if("abcdefghijklmnopqrstuvwxyz".indexOf(tile.toLowerCase()) !== -1) {
                doorsPresent.add(tile)
            }
        }
    }
    console.log(keysPresent, doorsPresent)
    
    // Check the keys outside their quadrant
    const pos = positions[3]
    let state = ""
    {
        const parts = [""]
        parts.push(pos[0] + "|" + pos[1])
        state = parts.join(",")
    }
    const steps = search(state, [...keysPresent])
    console.log('Steps', steps)
    sum += steps
}
console.log(sum)
//const state = 

